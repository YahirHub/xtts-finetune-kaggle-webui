#!/usr/bin/env python3
"""
Script de prueba para validar las funciones de limpieza y reanudaci√≥n de checkpoints
"""

import os
import sys
from pathlib import Path
import tempfile
import shutil

# Agregar el directorio utils al path para importar las funciones
sys.path.append(str(Path(__file__).parent / "utils"))

try:
    from gpt_train import cleanup_old_checkpoints, find_latest_checkpoint
    print("‚úÖ Funciones importadas correctamente")
except ImportError as e:
    print(f"‚ùå Error al importar funciones: {e}")
    sys.exit(1)


def test_checkpoint_functions():
    """Prueba las funciones de limpieza y b√∫squeda de checkpoints"""
    
    # Crear directorio temporal para pruebas
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        print(f"üîß Usando directorio temporal: {temp_path}")
        
        # Crear archivos de prueba simulando checkpoints
        test_files = [
            "best_model.pth",
            "best_model_576.pth", 
            "checkpoint_1000.pth",
            "checkpoint_2000.pth",
            "checkpoint_3000.pth",
            "config.json",
            "events.out.tfevents.123456"
        ]
        
        print("\nüìÅ Creando archivos de prueba...")
        for filename in test_files:
            test_file = temp_path / filename
            test_file.write_text("dummy content")
            print(f"   Creado: {filename}")
        
        print(f"\nüìä Archivos antes de la limpieza: {len(list(temp_path.glob('*.pth')))} archivos .pth")
        
        # Probar b√∫squeda del checkpoint m√°s reciente
        print("\nüîç Probando find_latest_checkpoint...")
        latest_checkpoint, latest_step = find_latest_checkpoint(temp_path)
        
        if latest_checkpoint:
            print(f"   ‚úÖ Checkpoint m√°s reciente encontrado: {Path(latest_checkpoint).name} (paso {latest_step})")
        else:
            print("   ‚ùå No se encontr√≥ checkpoint")
            
        # Probar limpieza de checkpoints
        print(f"\nüßπ Probando cleanup_old_checkpoints con max_checkpoints=1...")
        cleanup_old_checkpoints(temp_path, max_checkpoints=1)
        
        remaining_pth_files = list(temp_path.glob('*.pth'))
        print(f"üìä Archivos despu√©s de la limpieza: {len(remaining_pth_files)} archivos .pth")
        
        for pth_file in remaining_pth_files:
            print(f"   Qued√≥: {pth_file.name}")
            
        # Verificar que best_model.pth se mantiene siempre
        best_model_exists = (temp_path / "best_model.pth").exists()
        print(f"\n‚úÖ best_model.pth preservado: {'S√≠' if best_model_exists else 'No'}")
        
        # Verificar que solo queden los archivos esperados
        expected_remaining = 2  # best_model.pth + 1 checkpoint m√°s reciente
        if len(remaining_pth_files) <= expected_remaining:
            print(f"‚úÖ Limpieza exitosa: {len(remaining_pth_files)} archivos <= {expected_remaining} esperados")
        else:
            print(f"‚ùå Limpieza fallida: {len(remaining_pth_files)} archivos > {expected_remaining} esperados")
            
        return len(remaining_pth_files) <= expected_remaining


def test_empty_directory():
    """Prueba el comportamiento con directorio vac√≠o"""
    print("\n\nüîç Probando con directorio vac√≠o...")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # Probar con directorio vac√≠o
        latest_checkpoint, latest_step = find_latest_checkpoint(temp_path)
        cleanup_old_checkpoints(temp_path, max_checkpoints=1)
        
        if latest_checkpoint is None and latest_step == 0:
            print("‚úÖ Manejo correcto de directorio vac√≠o")
            return True
        else:
            print("‚ùå Error en manejo de directorio vac√≠o")
            return False


def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas de funciones de checkpoint...")
    
    try:
        test1_success = test_checkpoint_functions()
        test2_success = test_empty_directory()
        
        print(f"\n{'='*50}")
        print("üìã RESUMEN DE PRUEBAS:")
        print(f"   Test funci√≥n principal: {'‚úÖ PAS√ì' if test1_success else '‚ùå FALL√ì'}")
        print(f"   Test directorio vac√≠o:  {'‚úÖ PAS√ì' if test2_success else '‚ùå FALL√ì'}")
        
        if test1_success and test2_success:
            print("\nüéâ ¬°Todas las pruebas pasaron exitosamente!")
            print("\nüìå Las funciones est√°n listas para:")
            print("   ‚Ä¢ Limpiar checkpoints antiguos autom√°ticamente")
            print("   ‚Ä¢ Mantener solo los checkpoints m√°s recientes")
            print("   ‚Ä¢ Preservar always best_model.pth")
            print("   ‚Ä¢ Encontrar el checkpoint m√°s reciente para reanudaci√≥n")
            return True
        else:
            print("\nüí• Algunas pruebas fallaron")
            return False
            
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
